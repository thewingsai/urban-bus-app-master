name: Deploy to Hostinger via SSH

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      SSH_HOST: ${{ secrets.SSH_HOST }}
      SSH_PORT: ${{ secrets.SSH_PORT }}
      SSH_USERNAME: ${{ secrets.SSH_USERNAME }}
      SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
      DEPLOY_PATH: ${{ secrets.DEPLOY_PATH }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build

      - name: Setup SSH access (key or password)
        shell: bash
        run: |
          mkdir -p ~/.ssh
          SSH_PORT_SAFE=${SSH_PORT:-22}
          ssh-keyscan -p "$SSH_PORT_SAFE" "$SSH_HOST" >> ~/.ssh/known_hosts
          if [ -n "${{ secrets.SSH_PRIVATE_KEY }}" ]; then
            echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
            chmod 600 ~/.ssh/id_rsa
            echo "SSH_CMD=ssh -i ~/.ssh/id_rsa -p $SSH_PORT_SAFE -o StrictHostKeyChecking=yes" >> $GITHUB_ENV
            echo "RSYNC_SSH=ssh -i ~/.ssh/id_rsa -p $SSH_PORT_SAFE -o StrictHostKeyChecking=yes" >> $GITHUB_ENV
          else
            sudo apt-get update -y
            sudo apt-get install -y sshpass
            echo "SSH_CMD=sshpass -p '$SSH_PASSWORD' ssh -p $SSH_PORT_SAFE -o StrictHostKeyChecking=yes" >> $GITHUB_ENV
            echo "RSYNC_SSH=sshpass -p '$SSH_PASSWORD' ssh -p $SSH_PORT_SAFE -o StrictHostKeyChecking=yes" >> $GITHUB_ENV
          fi

      - name: Ensure remote deploy path exists
        if: env.DEPLOY_PATH != ''
        shell: bash
        run: |
          $SSH_CMD "$SSH_USERNAME@$SSH_HOST" "mkdir -p '$DEPLOY_PATH' '$DEPLOY_PATH/api'"

      - name: Deploy frontend (prefer dist; fallback to prebuilt tar)
        shell: bash
        run: |
          set -e
          if [ -d dist ]; then
            echo "Deploying dist/ via rsync"
            rsync -az --delete -e "$RSYNC_SSH" dist/ "$SSH_USERNAME@$SSH_HOST:$DEPLOY_PATH/"
          elif [ -f manual-deployment-package/urbanbus-enhanced.tar.gz ]; then
            echo "No dist/ found. Uploading prebuilt manual-deployment-package/urbanbus-enhanced.tar.gz and extracting on server"
            rsync -az -e "$RSYNC_SSH" manual-deployment-package/urbanbus-enhanced.tar.gz "$SSH_USERNAME@$SSH_HOST:$DEPLOY_PATH/"
            $SSH_CMD "$SSH_USERNAME@$SSH_HOST" "set -e; cd '$DEPLOY_PATH'; tar -xzf urbanbus-enhanced.tar.gz; rm -f urbanbus-enhanced.tar.gz; ls -la '$DEPLOY_PATH' | head -n 20"
          else
            echo "Neither dist/ nor prebuilt package found. Skipping frontend deploy.";
          fi

      - name: Deploy API folder if present
        shell: bash
        run: |
          if [ -d api ]; then
            echo "Deploying PHP API"
            rsync -az -e "$RSYNC_SSH" api/ "$SSH_USERNAME@$SSH_HOST:$DEPLOY_PATH/api/"
          fi
      
      - name: Deploy admin UI (admin.html/js)
        shell: bash
        run: |
          set -e
          if [ -f manual-deployment-package/admin.html ]; then
            rsync -az -e "$RSYNC_SSH" manual-deployment-package/admin.html "$SSH_USERNAME@$SSH_HOST:$DEPLOY_PATH/"
          fi
          if [ -f manual-deployment-package/admin.js ]; then
            rsync -az -e "$RSYNC_SSH" manual-deployment-package/admin.js "$SSH_USERNAME@$SSH_HOST:$DEPLOY_PATH/"
          fi

      - name: Deploy root PHP utilities if present
        shell: bash
        run: |
          shopt -s nullglob
          PHP_FILES=( *.php )
          if [ ${#PHP_FILES[@]} -gt 0 ]; then
            rsync -az -e "$RSYNC_SSH" "${PHP_FILES[@]}" "$SSH_USERNAME@$SSH_HOST:$DEPLOY_PATH/"
          fi

      - name: Upload .env to server (optional)
        if: ${{ secrets.ENV_PRODUCTION != '' }}
        shell: bash
        run: |
          printf "%s" "${{ secrets.ENV_PRODUCTION }}" | $SSH_CMD "$SSH_USERNAME@$SSH_HOST" "cat > '$DEPLOY_PATH/.env'"

      - name: Configure virtual host for urbanbus.co.in -> ${{ env.DEPLOY_PATH }}
        shell: bash
        env:
          DOMAIN: urbanbus.co.in
        run: |
          set -e
          REMOTE_CMDS='set -e; DOMAIN="'"$DOMAIN"'"; DEPLOY_PATH="'"$DEPLOY_PATH"'";
            echo "Configuring vhost for $DOMAIN to $DEPLOY_PATH";
            if command -v nginx >/dev/null 2>&1 && [ -d /etc/nginx ]; then
              # Try to find existing server block
              VHOST_FILE=$(grep -RIl "server_name[[:space:]]\+\(www\.\)\?$DOMAIN\b" /etc/nginx 2>/dev/null | head -n1 || true);
              if [ -n "$VHOST_FILE" ]; then
                cp -a "$VHOST_FILE" "${VHOST_FILE}.bak_$(date +%s)" || true;
                # Update root directive (first occurrence) to DEPLOY_PATH
                if grep -q "^[[:space:]]*root[[:space:]]" "$VHOST_FILE"; then
                  sed -i "0,/^[[:space:]]*root[[:space:]]/s##  root $DEPLOY_PATH;#" "$VHOST_FILE" || true;
                else
                  # Insert root under server { if not present
                  awk -v path="$DEPLOY_PATH" 'BEGIN{p=0} {print} /server[[:space:]]*\{/ && p==0 {print "    root " path ";"; p=1}' "$VHOST_FILE" > "$VHOST_FILE.tmp" && mv "$VHOST_FILE.tmp" "$VHOST_FILE" || true;
                fi;
              else
                # Create a minimal server block
                VHOST_FILE=/etc/nginx/sites-available/$DOMAIN.conf;
                cat > "$VHOST_FILE" <<CONF
server {
    listen 80;
    server_name $DOMAIN www.$DOMAIN;
    root $DEPLOY_PATH;
    index index.html index.htm;
    location / {
        try_files $uri $uri/ /index.html;
    }
    access_log /var/log/nginx/${DOMAIN}.access.log;
    error_log  /var/log/nginx/${DOMAIN}.error.log;
}
CONF
                ln -sf "$VHOST_FILE" /etc/nginx/sites-enabled/ || true;
                [ -f /etc/nginx/sites-enabled/default ] && rm -f /etc/nginx/sites-enabled/default || true;
              fi;
              nginx -t;
              if command -v systemctl >/dev/null 2>&1; then systemctl reload nginx; else service nginx reload || true; fi;
            fi;

            if command -v apache2ctl >/dev/null 2>&1 && [ -d /etc/apache2 ]; then
              APACHE_VHOST=$(grep -RIl "ServerName[[:space:]]\+$DOMAIN\b" /etc/apache2 2>/dev/null | head -n1 || true);
              if [ -z "$APACHE_VHOST" ]; then APACHE_VHOST=/etc/apache2/sites-available/$DOMAIN.conf; fi;
              cp -a "$APACHE_VHOST" "${APACHE_VHOST}.bak_$(date +%s)" 2>/dev/null || true;
              cat > "$APACHE_VHOST" <<CONF
<VirtualHost *:80>
    ServerName $DOMAIN
    ServerAlias www.$DOMAIN
    DocumentRoot $DEPLOY_PATH
    <Directory $DEPLOY_PATH>
        AllowOverride All
        Require all granted
    </Directory>
    ErrorLog \/var\/log\/apache2\/${DOMAIN}_error.log
    CustomLog \/var\/log\/apache2\/${DOMAIN}_access.log combined
</VirtualHost>
CONF
              a2enmod rewrite >/dev/null 2>&1 || true;
              a2ensite $(basename "$APACHE_VHOST") >/dev/null 2>&1 || true;
              a2dissite 000-default >/dev/null 2>&1 || true;
              if command -v systemctl >/dev/null 2>&1; then systemctl reload apache2; else service apache2 reload || true; fi;
            fi;'
          $SSH_CMD "$SSH_USERNAME@$SSH_HOST" "$REMOTE_CMDS"

      - name: Verify deployment contents on server
        shell: bash
        run: |
          $SSH_CMD "$SSH_USERNAME@$SSH_HOST" "set -e; echo 'Listing $DEPLOY_PATH:'; ls -la '$DEPLOY_PATH' | tail -n 50; echo 'Disk usage:'; du -sh '$DEPLOY_PATH' || true"

      - name: Try to reload web server (best effort)
        shell: bash
        run: |
          $SSH_CMD "$SSH_USERNAME@$SSH_HOST" "set -e; if command -v systemctl >/dev/null 2>&1; then sudo systemctl reload nginx 2>/dev/null || sudo systemctl reload apache2 2>/dev/null || true; else sudo service nginx reload 2>/dev/null || sudo service apache2 reload 2>/dev/null || true; fi"
